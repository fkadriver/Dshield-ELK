# Guy Bruneau, guybruneau@outlook.com
#
# Initial Release
# Date: 20 Jan 2023
# Version: 0.5
#
# Updated Date: 20 Feb 2023
# Added: Postlogs
# Modified all the SQL logs into modules to capture the various log format types
#
# This logstash parser is for the DShield Honeypot
# https://isc.sans.edu/tools/honeypot
#
# This parser uses ECS version 8.x
# https://www.elastic.co/guide/en/ecs/current/ecs-tls.html
#
# Initial Release
# Date: 20 Jan 2023
# Version: 0.5
#
# This logstash parser is for the DShield Honeypot for the SQLite database logs
# https://isc.sans.edu/tools/honeypot
#
# This parser uses ECS version 8.x
# https://www.elastic.co/guide/en/ecs/current/ecs-tls.html


filter {
  if [log][file][path] =~ "sqlite" {
    grok {
      match => {
        "message" => [

# Beginning of messages
          "INSERT INTO \"table\" VALUES\('%{GREEDYDATA:time}',replace\('.*\s+Host:\s+(?<destination.address>\S+)|(?<destination.ip>\d+.\d+.\d+.\d+)(:%{INT:destination.port})?\s+(Origin|Content-Type:|Connection:|Host:|Accept-Encoding:|User-(a|A)gent:|Content-Length:)\s+"
        ]
      }
    }
  }
}

filter {
  if [log][file][path] =~ "sqlite" {
    # https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html
    # Converting timestamp to accepted format
    #  epoch time: 1674309418
    date {
      match => [ "time", "yyyy-MM-dd'T'HH:mm:ss", "UNIX" ]
      target => "@timestamp"
#      timezone => "UTC"
    }
  }
}

filter {
  if [log][file][path] =~ "sqlite" {
    grok {
      match => {
        "message" => [

# User-Agent
          "INSERT INTO \"table\" VALUES\('%{GREEDYDATA:time}',replace\('.*\s+User-(a|A)gent:\s+(?<user_agent.original>\S.*?)\s+('|Connection:|Origin|Content-Type:|Host:|Accept-Encoding:|Content-Length:|Accept:)"
        ]
      }
    }
  }
}

filter {
  if [log][file][path] =~ "sqlite" {
    # https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html
    # Converting timestamp to accepted format
    #  epoch time: 1674309418
    date {
      match => [ "time", "yyyy-MM-dd'T'HH:mm:ss", "UNIX" ]
      target => "@timestamp"
#      timezone => "UTC"
    }
  }
}

filter {
  if [log][file][path] =~ "sqlite" {
    grok {
      match => {
        "message" => [

# Content-Length
          "INSERT INTO \"table\" VALUES\('%{GREEDYDATA:time}',replace\('.*(\s+)?Content-Length:\s+%{INT:http.request.bytes}\s+(Cookie:|Origin:|Content-Type:|Connection:|Host:|Accept-Encoding:|User-(a|A)gent:|'|\s+)"
        ]
      }
    }
  }
}

filter {
  if [log][file][path] =~ "sqlite" {
    # https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html
    # Converting timestamp to accepted format
    #  epoch time: 1674309418
    date {
      match => [ "time", "yyyy-MM-dd'T'HH:mm:ss", "UNIX" ]
      target => "@timestamp"
#      timezone => "UTC"
    }
  }
}

filter {
  if [log][file][path] =~ "sqlite" {
    grok {
      match => {
        "message" => [

# Referer
          "INSERT INTO \"table\" VALUES\('%{GREEDYDATA:time}',replace\('.*(\s+)?Referer:%{DATA:url.original}\s+(Upgrade-Insecure-Requests:|Cookie:|Origin:|Content-Type:|Connection:|Host:|Accept-Encoding:|User-(a|A)gent:|'|\s+)"
        ]
      }
    }
  }
}

filter {
  if [log][file][path] =~ "sqlite" {
    # https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html
    # Converting timestamp to accepted format
    #  epoch time: 1674309418
    date {
      match => [ "time", "yyyy-MM-dd'T'HH:mm:ss", "UNIX" ]
      target => "@timestamp"
#      timezone => "UTC"
    }
  }
}

filter {
  if [log][file][path] =~ "sqlite" {
    grok {
      match => {
        "message" => [

# username
          "INSERT INTO \"table\" VALUES\('%{GREEDYDATA:time}',replace\('.*(\s+)?user=%{DATA:user.name}\s+(Referer:|Upgrade-Insecure-Requests:|Cookie:|Origin:|Content-Type:|Connection:|Host:|Accept-Encoding:|User-(a|A)gent:|'|\s+)"
        ]
      }
    }
  }
}

filter {
  if [log][file][path] =~ "sqlite" {
    # https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html
    # Converting timestamp to accepted format
    #  epoch time: 1674309418
    date {
      match => [ "time", "yyyy-MM-dd'T'HH:mm:ss", "UNIX" ]
      target => "@timestamp"
#      timezone => "UTC"
    }
  }
}

filter {
  if [log][file][path] =~ "sqlite" {
    grok {
      match => {
        "message" => [

# Content-Type
          "INSERT INTO \"table\" VALUES\('%{GREEDYDATA:time}',replace\('.*(\s+)?Content-Type:\s+%{DATA:http.request.mime_type}\s+(Content-Length:|charset|Referer:|Upgrade-Insecure-Requests:|Cookie:|Origin:|Connection:|Host:|Accept-Encoding:|User-(a|A)gent:|'|\s+)"
        ]
      }
    }
  }
}

filter {
  if [log][file][path] =~ "sqlite" {
    # https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html
    # Converting timestamp to accepted format
    #  epoch time: 1674309418
    date {
      match => [ "time", "yyyy-MM-dd'T'HH:mm:ss", "UNIX" ]
      target => "@timestamp"
#      timezone => "UTC"
    }
  }
}

filter {
  if [log][file][path] =~ "sqlite" {
    grok {
      match => {
        "message" => [

# SOAPAction
          "INSERT INTO \"table\" VALUES\('%{GREEDYDATA:time}',replace\('.*(\s+)?SOAPAction:\s+%{GREEDYDATA:url.full}\s+(Referer:|Upgrade-Insecure-Requests:|Cookie:|Origin:|Content-Type:|Connection:|Host:|Accept-Encoding:|User-(a|A)gent:|'|\s+)"
        ]
      }
    }
  }
}

filter {
  if [log][file][path] =~ "sqlite" {
    # https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html
    # Converting timestamp to accepted format
    #  epoch time: 1674309418
    date {
      match => [ "time", "yyyy-MM-dd'T'HH:mm:ss", "UNIX" ]
      target => "@timestamp"
#      timezone => "UTC"
    }
  }
}

filter {
  if [log][file][path] =~ "sqlite" {
    # https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html
    # Converting timestamp to accepted format
    #  epoch time: 1674309418
    date {
      match => [ "time", "yyyy-MM-dd'T'HH:mm:ss", "UNIX" ]
      target => "@timestamp"
#      timezone => "UTC"
    }
  }
}

filter {
  if [log][file][path] =~ "sqlite" {
    grok {
      match => {
        "message" => [

# Accept-Encoding
          "INSERT INTO \"table\" VALUES\('%{GREEDYDATA:time}',replace\('.*(\s+)?Accept-Encoding:\s+%{DATA:file.extension},?\s+(deflate|Content-Length:|charset|Referer:|Upgrade-Insecure-Requests:|Cookie:|Origin:|Content-Type:|Connection:|Host:|User-(a|A)gent:|'|\s+)"
        ]
      }
    }
  }
}

filter {
  if [log][file][path] =~ "sqlite" {
    grok {
      match => {
        "message" => [

# End of messages
          "INSERT INTO \"table\" VALUES\('%{GREEDYDATA:time}',replace\('.*','%{IP:source.ip}','%{DATA:http.request.method}','%{DATA:http.request.body.content}(','None|','.*)?','HTTP/%{DATA:http.version}(','- Standard Request.)?(','%{IP:destination.ip})?'\);"
        ]
      }
    }
  }
}

filter {
  if [log][file][path] =~ "sqlite" {
    mutate {
      add_field => { "event.dataset" => "sqlite" }
      add_field => { "event.category" => "network" }
      add_field => { "event.kind" => "event" }
      add_field => { "event.type" => "access" }
      add_field => { "event.outcome" => "success" }
      add_field => { "interface.alias" => "outside" }
      add_field => { "network.direction" => "inbound" }
      add_field => { "network.type" => "ipv4" }
    }
  }
}


# https://www.elastic.co/guide/en/logstash/current/plugins-filters-dns.html
# 900 ms = 15 mins

filter {
  if [log][file][path] =~ "sqlite" {
    mutate {
      copy => { "source.ip" => "source.domain" }
    }
    dns {
      reverse => [ "source.domain" ]
      nameserver => [ "1.1.1.1","9.9.9.9" ]
      action => "replace"
      hit_cache_size => 4096
      hit_cache_ttl => 900
      failed_cache_size => 1024
      failed_cache_ttl => 900
    }
    mutate {
      copy => { "source.domain" => "related.hosts" }
    }
  }
}

# Add GeoIP information to destination hostname

filter {
  if [log][file][path] =~ "sqlite" {
    geoip {
      source => "source.ip"
      target => "source.geo"
      # database => "/etc/logstash/ingest-geoip/GeoLite2-City.mmdb"
    }
  }
}

# This section is to remove any non-needed fields

filter {
  if [log][file][path] =~ "sqlite" {
    mutate {
      # Remove these fields
      remove_field => [ "time" ]
      copy => { "source.ip" => "related.ip" }
    }
  }
}

# This section is to remove any non-needed fields

filter {
  if [log][file][path] =~ "sqlite" {
    mutate {
    # Remove these fields
      #remove_field => ["message"]
      # Make the following changes: rename and copy fields
      copy => { "source.ip" => "source.address" }
    }
  }
}

